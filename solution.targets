<Project>

    <PropertyGroup>
        <SolutionTargetsIsImported>true</SolutionTargetsIsImported>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(Configuration)' == 'ReleaseTesting' ">
        <IsPackable Condition=" '$(IsPackableInReleaseTestingConfiguration)' != 'true' ">false</IsPackable>
    </PropertyGroup>

    <Import Condition="Exists('$(RepoRoot)\development.local.targets')" Project="$(RepoRoot)\development.local.targets"/>

    <!-- Check for the ProjectName; to see if we should skip optimizing-->
    <PropertyGroup Condition=" '$(ProjectsThatShouldNotBeOptimized)' != '' AND $(ProjectsThatShouldNotBeOptimized.Contains('$(MSBuildProjectName);'))">
        <Optimize>false</Optimize>
    </PropertyGroup>

    <PropertyGroup>
        <AssemblyVersion Condition=" '$(AssemblyVersion)' != '' AND $([System.Text.RegularExpressions.Regex]::IsMatch('$(AssemblyVersion)', '^\d+\.\d+\.\d+-[a-zA-Z].*'))">$([System.Text.RegularExpressions.Regex]::Replace('$(AssemblyVersion)', '(^\d+\.\d+\.\d+)-[a-zA-Z].*', '$1.0'))</AssemblyVersion>
        <FileVersion Condition=" '$(FileVersion)' != '' AND $([System.Text.RegularExpressions.Regex]::IsMatch('$(FileVersion)', '^\d+\.\d+\.\d+-[a-zA-Z].*'))">$([System.Text.RegularExpressions.Regex]::Replace('$(FileVersion)', '(^\d+\.\d+\.\d+)-[a-zA-Z].*', '$1.0'))</FileVersion>
    </PropertyGroup>


    <!-- SOLUTION WIDE CUSTOM TARGETS -->

    <!-- CopyToLocalPackages Target -->
    <Target Name="CopyToLocalPackages" AfterTargets="Pack" Condition="'$(OutputToDevelopmentPackages)' == 'true' AND '$(IsPackable)' == 'true'">
        <Message Text="Creating DevelopmentPackagesDirectory: $(DevelopmentPackagesDirectory)" Condition="!Exists('$(DevelopmentPackagesDirectory)')" Importance="$(InternalMsbuildMessageImportance)" />
        <MakeDir Directories="$(DevelopmentPackagesDirectory)" Condition="!Exists('$(DevelopmentPackagesDirectory)')" />

        <Message Importance="$(InternalMsbuildMessageImportance)"
                 Text="
DevelopmentPackagesDirectory: $(DevelopmentPackagesDirectory)
PackageOutputPath: $(PackageOutputAbsolutePath)
PackageId: $(PackageId)
PackageVersion: $(PackageVersion)"  />

        <Exec Command="del $(PackageId).$(PackageVersion).*" WorkingDirectory="$(DevelopmentPackagesDirectory)" />

        <Copy SourceFiles="$(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg" DestinationFolder="$(DevelopmentPackagesDirectory)" />
    </Target>


    <!-- CreateDevelopmentPropsFile Target -->
    <Target Name="CreateDevelopmentPropsFile" BeforeTargets="$(RunOnlyOnceBeforeBuildTarget)" Condition="'$(Configuration)' != 'Release' AND Exists('$(RepoRoot)') AND !Exists('$(RepoRoot)\development.local.props')">
        <PropertyGroup>
            <RepoRootParent>$([System.IO.Path]::GetFullPath('$([System.IO.Path]::Combine('$(RepoRoot)', '..'))'))</RepoRootParent>
            <LocalPackagesPath Condition="'$(LocalPackagesPath)' == ''">$(RepoRootParent)\localPackages</LocalPackagesPath>
            <DevelopmentPropsFileLines>
                &lt;Project&gt;
                &lt;PropertyGroup&gt;
                &lt;DevelopmentPackagesDirectory&gt;$(LocalPackagesPath)&lt;/DevelopmentPackagesDirectory&gt;
                &lt;!--  low, normal, or high --&gt;
                &lt;InternalMsbuildMessageImportance&gt;high&lt;/InternalMsbuildMessageImportance&gt;
                &lt;OutputToDevelopmentPackages&gt;false&lt;/OutputToDevelopmentPackages&gt;
                &lt;UseProjectReferences&gt;true&lt;/UseProjectReferences&gt;
                &lt;/PropertyGroup&gt;
                &lt;/Project&gt;
            </DevelopmentPropsFileLines>
        </PropertyGroup>

        <Message Importance="$(InternalMsbuildMessageImportance)"
                 Text="
Creating default development.local.props file...

$(DevelopmentPropsFileLines)

RepoRoot: '$(RepoRoot)'
RepoRootParent: '$(RepoRootParent)'
LocalPackagesPath: '$(LocalPackagesPath)'
                " />

        <WriteLinesToFile File="$(RepoRoot)\development.local.props" Lines="$(DevelopmentPropsFileLines)" Overwrite="True" ContinueOnError="true" />
    </Target>


    <!-- CreateDevelopmentTargetsFile Target -->
    <Target Name="CreateDevelopmentTargetsFile" BeforeTargets="$(RunOnlyOnceBeforeBuildTarget)" Condition="'$(Configuration)' != 'Release' AND Exists('$(RepoRoot)') AND !Exists('$(RepoRoot)\development.local.targets')">
        <PropertyGroup>
            <DevelopmentTargetsFileLines>
                &lt;Project&gt;
                &lt;PropertyGroup&gt;
                <!-- Projects to temporarily disable optimization on to make debugging in the ReleaseTesting configuration easier -->
                <!-- Each project name must end with a semicolon, even if there is only a single entry -->
                &lt;ProjectsThatShouldNotBeOptimized&gt;
                &lt;/ProjectsThatShouldNotBeOptimized&gt;
                &lt;/PropertyGroup&gt;
                &lt;/Project&gt;
            </DevelopmentTargetsFileLines>
        </PropertyGroup>

        <Message Importance="$(InternalMsbuildMessageImportance)"
                 Text="
Creating default development.local.targets file...

$(DevelopmentTargetsFileLines)
                " />

        <WriteLinesToFile File="$(RepoRoot)\development.local.targets" Lines="$(DevelopmentTargetsFileLines)" Overwrite="True" ContinueOnError="true" />
    </Target>


    <!-- PreparePackageReleaseNotesFromFile Target -->
    <Target Name="PreparePackageReleaseNotesFromFile" BeforeTargets="GenerateNuspec" Condition="Exists('$(ReleaseNotesTextFilePath)')">
        <ReadLinesFromFile File="$(ReleaseNotesTextFilePath)" >
            <Output TaskParameter="Lines" ItemName="ReleaseNoteLines"/>
        </ReadLinesFromFile>
        <PropertyGroup>
            <PackageReleaseNotes>@(ReleaseNoteLines, '%0a')</PackageReleaseNotes>
        </PropertyGroup>
    </Target>

</Project>