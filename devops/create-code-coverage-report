#!/bin/sh

allLibraryNames=("Rhinobyte.Extensions.DataAnnotations" "Rhinobyte.Extensions.DependencyInjection" "Rhinobyte.Extensions.Reflection" "Rhinobyte.Extensions.TestTools" "Rhinobyte.Tools.ProjectStructureTests");
allLibraryNamesCount=${#allLibraryNames[@]}

dotnetConfiguration=''
testProjectNames=()
testProjectIndex=0
for (( paramIndex=1; paramIndex<=$#; paramIndex++ )); do
	nextParam="${!paramIndex}";
	#echo "nextParam: $nextParam";
	if [ "$nextParam" = '-p' ] || [ "$nextParam" = '--project' ]; then
		paramIndex=$((paramIndex+1));
		testProjectNames[$testProjectIndex]="${!paramIndex}";
		testProjectIndex=$((testProjectIndex+1));
	fi;
	if [ "$nextParam" = '-c' ] || [ "$nextParam" = '--configuration' ]; then
		if [ ! -z "$dotnetConfiguration"]; then
			echo '-c|--configuration parameter was specified more than once';
			exit 1;
		fi;
		paramIndex=$((paramIndex+1));
		dotnetConfiguration="${!paramIndex}";
	fi;
done;

if [ $testProjectIndex -eq 0 ]; then
	testProjectNames=("Rhinobyte.Extensions.DataAnnotations.Tests" "Rhinobyte.Extensions.DependencyInjection.Tests" "Rhinobyte.Extensions.Reflection.Tests" "Rhinobyte.Extensions.TestTools.Tests" "Rhinobyte.Tools.ProjectStructureTests.Tests");
	testProjectsCount=${#testProjectNames[@]};
else
	testProjectsCount=$testProjectIndex
fi;

echo "Test Project Names:  ${testProjectNames[@]}  ($testProjectsCount)"

# Switch commented line to run coverage for all 3 target frameworks
#targetFrameworkNames=("net48", "netcoreapp3.1", "net5.0");
targetFrameworkNames=("net5.0")
targetFrameworksCount=${#targetFrameworkNames[@]}
echo "Target Frameworks:  ${targetFrameworkNames[@]}"

# Change this to false to generate the report for all of the assemblies imported by a given test project
# e.g. Rhinobyte.Extensions.DependencyInjection.Tests consumes both Rhinobyte.Extensions.DependencyInjection and Rhinobyte.Extensions.Reflection
reportForIndividualProjectOnly=true
echo "Report For Individual Project Only:  $reportForIndividualProjectOnly"


for (( testProjectIndex=0; testProjectIndex<${testProjectsCount}; testProjectIndex++ ));
do
	testProjectName="${testProjectNames[$testProjectIndex]}"
	echo "";
	echo "Running tests for:  $testProjectName";

	echo 'Removing Old Test Results Folders...';
	rm -rf "tests/$testProjectName/TestResults";
	echo "";

	dotnetConfigurationFlag=''
	if [ ! -z "$dotnetConfiguration" ]; then
		dotnetConfigurationFlag="--configuration $dotnetConfiguration"
	fi;
	for (( frameworkIndex=0; frameworkIndex<${targetFrameworksCount}; frameworkIndex++ ));
	do
		targetTestFramework="${targetFrameworkNames[$frameworkIndex]}"
		echo "Running dotnet test for target framework:  $targetTestFramework  ($frameworkIndex)"
		echo "dotnet test "$dotnetConfigurationFlag" --framework \"$targetTestFramework\" \"tests\\$testProjectName\\$testProjectName.csproj\" --collect:\"XPlat Code Coverage\" --results-directory:\"tests\\$testProjectName\\TestResults\\$targetTestFramework\"";
		dotnet test --framework "$targetTestFramework" "tests\\$testProjectName\\$testProjectName.csproj" --collect:"XPlat Code Coverage" --results-directory:"tests\\$testProjectName\\TestResults\\$targetTestFramework"
		echo "";
	done;
	echo "";

	echo 'Generating the coverage reports...';
	echo '';
	for targetFrameworkFolder in "tests/$testProjectName/TestResults/"*/ ; do
		targetFramework=$(basename $targetFrameworkFolder)
		echo "Checking TargetFramwork:  $targetFramework"
		for guidFolder in "$targetFrameworkFolder"*/ ; do
			echo "Checking Guid Folder:  $guidFolder"
			coverageFile="$guidFolder"'coverage.cobertura.xml';
			guidValue=$(basename $guidFolder)

			if [ -f $coverageFile ]; then
				echo "Generating Report For $coverageFile...";
				assemblyFilters="-ExampleLibrary*";

				if [ $reportForIndividualProjectOnly = "true" ]; then
					for (( testProjectIndexTwo=0; testProjectIndexTwo<${allLibraryNamesCount}; testProjectIndexTwo++ ));
					do
						projectNameToFilter="${allLibraryNames[$testProjectIndexTwo]}"
						if [ "$projectNameToFilter.Tests" = "$testProjectName" ]; then
							continue;
						fi;

						assemblyFilters="$assemblyFilters;-$projectNameToFilter";
					done;
				fi;

				echo "AssemblyFilters:  $assemblyFilters"

				nextCoverageReportTargetDirectory="TestResults\\CoverageReports\\$testProjectName\\Debug\\$targetFramework\\$guidValue"
				if [ ! -z "$dotnetConfiguration" ]; then
					nextCoverageReportTargetDirectory="TestResults\\CoverageReports\\$testProjectName\\$dotnetConfiguration\\$targetFramework\\$guidValue"
				fi;

				echo "dotnet ~/.nuget/packages/reportgenerator/4.8.12/tools/net5.0/ReportGenerator.dll -reports:\"$coverageFile\" -targetdir:\"$nextCoverageReportTargetDirectory\" -reporttypes:Html -assemblyfilters:\"$assemblyFilters\" ";
				dotnet ~/.nuget/packages/reportgenerator/4.8.12/tools/net5.0/ReportGenerator.dll -reports:"$coverageFile" -targetdir:"$nextCoverageReportTargetDirectory" -reporttypes:Html -assemblyfilters:"$assemblyFilters";
			fi;
		done;
	done;

	echo "";
done;

echo '';
echo '  DONE!!';
echo '';